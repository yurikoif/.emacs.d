(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.1)
 '(ac-trigger-key nil)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(c-basic-offset 4)
 '(c-default-style "linux")
 '(cua-mode t nil (cua-base))
 '(custom-enabled-themes (quote (wombat)))
 '(default-frame-alist
    (quote
     ((tool-bar-lines . 0)
      (menu-bar-lines . 1)
      (alpha . 90))))
 '(global-auto-revert-mode t)
 '(global-linum-mode t)
 '(highlight-indent-guides-auto-character-face-perc 25)
 '(highlight-indent-guides-method (quote character))
 '(indent-tabs-mode t)
 '(inhibit-startup-screen t)
 '(make-backup-files nil)
 '(nav-width 25)
 '(org-support-shift-select (quote always))
 '(package-selected-packages
   (quote
    (highlight-indent-guides csharp-mode auto-complete-c-headers ac-math auto-correct markdown-mode ## auto-complete auto-complete-clang)))
 '(prog-mode-hook (quote (auto-complete-mode highlight-indent-guides-mode)))
 '(scroll-step 1)
 '(select-enable-clipboard t)
 '(show-paren-mode t)
 '(tab-always-indent t)
 '(tab-width 4)
 '(tags-table-list (quote ("~/")))
 '(tool-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highlight-indentation-face ((t (:inherit fringe)))))

;(ac-config-default)
;; initialize auto-complete-mode
;(global-auto-complete-mode t)
;(setq ac-auto-start nil)
;(ac-set-trigger-key "TAB")
(toggle-frame-maximized)
;; custom surface
(set-background-color "gray9")
(set-foreground-color "wheat")
(fset 'yes-or-no-p 'y-or-n-p)

(add-hook 'c-mode-common-hook 'my-cc-style)
(add-hook 'csharp-mode-hook 'my-cc-style)
;; set haskell indentation
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
;; indent
(add-hook 'makefile-mode-hook 'my-script-indent)
(add-hook 'python-mode-hook 'my-script-indent)
(add-hook 'lisp-mode-hook 'my-script-indent)
(add-hook 'emacs-lisp-mode-hook 'my-script-indent)
;(add-to-list 'write-file-functions 'delete-trailing-whitespace)

(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  )

(when (eq system-type 'darwin)
  ;(setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'control)
  (setq mac-command-modifier 'control)
  (setq mac-function-modifier 'meta)
  (define-key key-translation-map (kbd "M-<left>") (kbd "<home>"))
  (define-key key-translation-map (kbd "M-<right>") (kbd "<end>"))
  (define-key key-translation-map (kbd "M-<up>") (kbd "<prior>"))
  (define-key key-translation-map (kbd "M-<down>") (kbd "<next>"))
  (global-set-key (kbd "<home>") 'beginning-of-line)
  (global-set-key (kbd "<end>") 'end-of-line)
  (global-set-key (kbd "C-M-<up>") 'previous-buffer)
  (global-set-key (kbd "C-M-<down>") 'next-buffer)
  (global-set-key (kbd "M-<backspace>") 'delete-forward-char)
  )

;; key binding
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-a") 'mark-whole-buffer)
(global-set-key (kbd "C-o") 'find-file)
(global-set-key (kbd "C-S-o") 'find-name-dired)
(global-set-key (kbd "C-w") 'kill-this-buffer)
(global-set-key (kbd "C-k") 'kill-emacs)
(global-set-key (kbd "C-q") 'replace-string)
(global-set-key (kbd "C-f") 'isearch-forward)
(global-set-key (kbd "C-.") 'isearch-repeat-forward)
(global-set-key (kbd "C-,") 'isearch-repeat-backward)
(global-set-key (kbd "C->") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-/") 'isearch-forward-symbol-at-point)
(global-set-key (kbd "C-S-f") 'my-grep-find-read-from-minibuffer)
(global-set-key (kbd "C-?") 'my-grep-find-at-point)
(global-set-key (kbd "C-l") 'goto-line)
(global-set-key (kbd "C-;") 'comment-line)
(global-set-key (kbd "C-b") 'buffer-menu)
(global-set-key (kbd "C-t") 'my-create-tags)
(global-set-key [C-tab] 'other-window)
(global-set-key [C-S-iso-lefttab] 'other-window---1)
(global-set-key (kbd "C-<prior>") 'previous-buffer)
(global-set-key (kbd "C-<next>") 'next-buffer)
(global-set-key [M-f4] 'kill-emacs)
(global-set-key [f7] 'gdb)
(global-set-key [C-f7] 'jdb)
(global-set-key [f9] 'my-compile)
(global-set-key [C-f9] 'my-run)

;; custom functions
(defun my-create-tags (dir-name)
  "Create tags file."
  (interactive "DCreate TAGS file from: ")
  (let ((save-dir-name
         (completing-read "Save TAGS file to: "
                          tags-table-list nil t (car tags-table-list)
                          )
         )
        )
    (eshell-command (format "find %s -type f -name \"*.[ch]\" -or -name \"*.[ch]pp\" | etags - &&
                             mv ./TAGS %s"
                            dir-name
                            save-dir-name)
                    )
    )
  )

(defun my-script-indent ()
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  )

(defun my-working-indent ()
  (setq c-basic-offset 2)
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
  )

(defun my-cc-style()
  (c-set-style "linux")
  (c-set-offset 'inlambda '0)
  (c-set-offset 'innamespace '0)
  (c-set-offset 'inextern-lang '0)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'label '0)
  (c-set-offset 'case-label '0)
  (c-set-offset 'access-label '-)
  (my-working-indent)
  ;(setq c-basic-offset 4)
  ;(setq tab-width 4)
  ;(setq indent-tabs-mode t)
  )

(defun my-toggle-comment ()
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))

(defun my-grep-find (what-to-grep)
  (interactive)
  (setq where-to-grep (read-directory-name "Grep in: " default-directory))
  (grep-find (format "find %s -type f -exec grep --color -nH --exclude='TAGS' --include='*.h' --include='*.cpp' --include='*.py' --include='*.c' -e \"%s\" \{\} +"
                     where-to-grep what-to-grep))
  )
(defun my-grep-find-read-from-minibuffer ()
  "setting up grep-command using sentence read from minibuffer"
  (interactive)
  (my-grep-find (read-string "Grep: "))
  )
(defun my-grep-find-at-point ()
  "setting up grep-command using current word under cursor as a search string"
  (interactive)
  (my-grep-find (symbol-at-point))
  )

(defun other-window---1 ()
  (interactive)
  (other-window -1))

(defun my-compile ()
  "Function for compiling source files."
  (interactive)
  (if (null buffer-file-name)
      (compile (compilation-read-command (car compile-history)))
    (let ((full (file-name-nondirectory buffer-file-name))
          (pref nil)
          (comm nil)
          )
      (setq pref (file-name-sans-extension full))
      (cond
       ((eq major-mode 'c-mode)
        (setq comm (concat "gcc -o " pref " " full " -g -Wall -lm" "-std=c99"))
        )
       ((eq major-mode 'c++-mode)
        (setq comm (concat "g++ -o " pref " " full " -g -Wall"))
        )
       ((eq major-mode 'java-mode)
        (setq comm (concat "javac -g " full))
        )
       ((eq major-mode 'pascal-mode)
        (setq comm (concat "fpc -g " full))
        )
       ((eq major-mode 'python-mode)
        (setq comm (concat "python " full))
        )
       ((eq major-mode 'haskell-mode)
        (setq comm (concat "ghc -o " pref " " full))
        )
       ((eq major-mode 'lisp-mode)
        (setq comm (concat "clisp " full))
        )
       ((eq major-mode 'latex-mode)
        (setq comm (concat "pdflatex " full))
        )
       (t (setq comm nil))
       )
      (if (null comm)
          (if (eq major-mode 'cython-mode)
              (my-cython-compile pref)
            (compile (compilation-read-command (car compile-history)))
            )
        (compile (compilation-read-command comm))
        )
      (setq my-compiled-flag t)
      )
    )
  )

(defun my-run ()
  "Function for running compiled execs."
  (interactive)
  (let ((full nil)
        (pref nil)
        (comm nil)
        )
    (if (null buffer-file-name)
        (when (= my-gud-flag 1)
          (when (eq (current-buffer) gud-comint-buffer)
            (setq full (file-name-nondirectory (buffer-file-name my-gud-entry)))
            (setq pref (file-name-sans-extension full))
            )
          )
      (progn
        (setq full (file-name-nondirectory buffer-file-name))
        (setq pref (file-name-sans-extension full))
        )
      )
    (cond
     ((eq major-mode 'java-mode)
      (setq comm (concat "java " pref))
      )
     ((eq major-mode 'python-mode)
      (setq comm (concat "python " full))
      )
     ((not (string= pref full))
      (setq comm (concat "./" pref))
      )
     (t (setq comm nil))
     )
    (if (null comm)
        (shell-command (read-shell-command "Shell command: " (car shell-command-history)))
      (shell-command (read-shell-command "Shell command: " comm))
      )
    )
  )
